<?xml version="1.0"?>
<doc>
<assembly>
<name>
ePermitDAL
</name>
</assembly>
<members>
<member name="M:ePermitDAL.SqlHelper.ParseValue``1(System.Data.SqlClient.SqlDataReader,System.String)">
	<summary>
 Parses the value.
 </summary>
	<typeparam name="T"></typeparam>
	<param name="reader">The reader.</param>
	<param name="column">The column.</param>
	<returns></returns>
</member><member name="P:ePermitDAL.LookupCodeGuid.Code">
	<summary>
 Gets or sets the integer code.
 </summary>
	<value>The integer code.</value>
</member><member name="P:ePermitDAL.LookupCodeGuid.Description">
	<summary>
 Gets or sets the description of the code (i.e. longer more descriptive and understandable).
 </summary>
	<value>The description.</value>
</member><member name="P:ePermitDAL.LookupCodeGuid.CodeOption">
	<summary>
 Gets or sets the description of the code (i.e. longer more descriptive and understandable).
 </summary>
	<value>The description.</value>
</member><member name="T:ePermitDAL.LookupCodeGuid">
	<summary>
	</summary>
</member><member name="P:ePermitDAL.LookupCodeInt.Code">
	<summary>
 Gets or sets the integer code.
 </summary>
	<value>The integer code.</value>
</member><member name="P:ePermitDAL.LookupCodeInt.Description">
	<summary>
 Gets or sets the description of the code (i.e. longer more descriptive and understandable).
 </summary>
	<value>The description.</value>
</member><member name="M:ePermitDAL.RuleHelper.isInRole(ePermitDAL.BaseBusiness,System.String)">
	<summary>
 Determines whether the current logged-in user is in the specified role.
 </summary>
	<param name="Role">The role name.</param>
	<returns>
		<c>true</c> if [is in role] [the specified role]; otherwise, <c>false</c>.
 </returns>
</member><member name="M:ePermitDAL.RuleHelper.isInRoles(ePermitDAL.BaseBusiness,System.String[])">
	<summary>
 Determines whether the current logged-in use is in the specified array of roles.
 </summary>
	<param name="Role">The role name string array.</param>
	<returns>
		<c>true</c> if [is in roles] [the specified role]; otherwise, <c>false</c>.
 </returns>
</member><member name="P:ePermitDAL.LookupCode.Description">
	<summary>
 Gets or sets the description of the code (i.e. longer more descriptive and understandable).
 </summary>
	<value>The description.</value>
</member><member name="F:ePermitDAL.AllowableStatuses.StatusDictionary">
	<summary>
 StatusDictionary provides an enumeration of allowable statuses keyed first by FromStatus, then by ToStatus.
 - Each combination of FromStatus and ToStatus provides a formattable message to include with emails.
 </summary>
	<remarks>Used by MessageText.GetMessageText.</remarks>
</member><member name="P:ePermitDAL.LookupCodeString.Code">
	<summary>
 Gets or sets the integer code.
 </summary>
	<value>The integer code.</value>
</member><member name="P:ePermitDAL.LookupCodeString.Description">
	<summary>
 Gets or sets the description of the code (i.e. longer more descriptive and understandable).
 </summary>
	<value>The description.</value>
</member><member name="P:ePermitDAL.LookupCodeString.CodeOption">
	<summary>
 Gets or sets an optional guid value of the code (i.e. longer more descriptive and understandable).
 </summary>
	<value>The description.</value>
</member><member name="T:ePermitDAL.LookupCodeString">
	<summary>
	</summary>
</member><member name="M:ePermitDAL.Layout.DeepCopy(System.Int32,System.Int32,System.Decimal)">
	<summary>
 Performs a deep copy of all controls in a form tree by iteratively looping through the nodes.
 A new top level control for the layout should be created first. Then this sub is called with the
 PKey for the old top level control, the PKey for the new top level control and the new version number.
 </summary>
	<param name="oldPKey">The old PKey.</param>
	<param name="newPKey">The new PKey.</param>
</member><member name="P:ePermitDAL.ValidationResult.isFail">
	<summary>
 Gets or sets a value indicating whether this instance failed validation checl.
 </summary>
	<value><c>true</c> if this instance failed validation; otherwise, <c>false</c>.</value>
</member><member name="P:ePermitDAL.ValidationResult.Message">
	<summary>
 Gets or sets the message explaining validation result.
 </summary>
	<value>The message.</value>
</member><member name="P:ePermitDAL.ValidationResult.Level">
	<summary>
 Gets or sets the level (i.e. severity) of the failure.
 </summary>
	<value>The level.</value>
</member><member name="T:ePermitDAL.ValidationResult">
	<summary>
 Returns the results of a validation check.
 </summary>
</member><member name="M:ePermitDAL.CheckIDResult.CheckRole(System.String[])">
	<summary>
 Checks to ensure the the UserName is a member of the role.
 </summary>
	<param name="roles">The role(s) to verify. If the user is in any one of the roles then true is returned.</param>
	<returns></returns>
</member><member name="M:ePermitDAL.CheckIDResult.CheckProfileOption(System.String,System.String)">
	<summary>
 Checks to ensure that the UserName is a member of the role.
 </summary>
	<param name="ProfileOption">The ProfileOption to verify (i.e. 'Operator').</param>
	<param name="ProfileValue">The ProfileValue to verify (i.e. operator number).</param>
	<returns></returns>
</member><member name="M:ePermitDAL.CheckIDResult.CheckID(System.Guid,System.String,System.Int32)">
	<summary>
 Checks the TokenID to see if it's valid and hasn't exceeded the timeout value since the previous web service method call.
 </summary>
	<param name="TokenID">The TokenID from a login result to be validated.</param>
	<returns></returns>
</member><member name="P:ePermitDAL.WsStatus.Success">
	<summary>
 Gets or sets a value indicating whether this operation <see cref="T:ePermitDAL.WsStatus"/> was a success.
 </summary>
	<value><c>true</c> if success; otherwise, <c>false</c>.</value>
</member><member name="P:ePermitDAL.WsStatus.Status">
	<summary>
 Gets or sets the status for the operation. This is an enum to indicate OK, Timeout, Exception or other result.
 </summary>
	<value>The status.</value>
</member><member name="P:ePermitDAL.WsStatus.Message">
	<summary>
 Gets or sets the message indicating why the operation failed.
 </summary>
	<value>The message.</value>
</member><member name="P:ePermitDAL.WsStatus.Create">
	<summary>
 Gets or sets a value indicating whether the current user has create rights for this operation.
 </summary>
	<value><c>true</c> if create rights; otherwise, <c>false</c>.</value>
</member><member name="P:ePermitDAL.WsStatus.Read">
	<summary>
 Gets or sets a value indicating whether the current user has read rights for this operation..
 </summary>
	<value><c>true</c> if read rights; otherwise, <c>false</c>.</value>
</member><member name="P:ePermitDAL.WsStatus.Update">
	<summary>
 Gets or sets a value indicating whether the current user has update rights for this operation.
 </summary>
	<value><c>true</c> if update rights; otherwise, <c>false</c>.</value>
</member><member name="P:ePermitDAL.WsStatus.Delete">
	<summary>
 Gets or sets a value indicating whether the current user has delete rights for this operation.
 </summary>
	<value><c>true</c> if delete rights; otherwise, <c>false</c>.</value>
</member><member name="P:ePermitDAL.BaseBusiness.RecordState">
	<summary>
 Gets or sets the state of the record (i.e. None, Modify, Insert or Delete).
 </summary>
	<value>The state of the record (an ePermitDAL.RecordState enum).</value>
</member><member name="P:ePermitDAL.BaseBusiness.OriginalValues">
	<summary>
 Gets or sets the original values.
 </summary>
	<value>A dictionary of the original valies of the object's properties keyed by property name.</value>
	<remarks>Used to compare the current state to the original state in form renderer.
 If the property name is not found in the keys no comparison will be made in form renderer.
 </remarks>
</member><member name="T:ePermitDAL.BaseBusiness">
	<summary>
 Base class for LINQ to SQL classes.
 This class inherits from BaseForm which implements the IDataErrorInfo 
 interface so that the ErrorProvider and DataGridView can display
  validation errors in the UI.
 </summary>
	<remarks></remarks>
</member><member name="M:ePermitDAL.ePermitClassesDataContext.GetOperator(System.Int32)">
	<summary>
 Gets the operator # for a formKey.
 </summary>
	<param name="formKey">The form key.</param>
	<returns></returns>
</member><member name="M:ePermitDAL.eFormTask.Notify(System.Int32)">
	<summary>
 Insert/Update the eNotify records with due date information
 </summary>
	<param name="minimumDaysRemaining">The minimum days remaining before the task due date.</param>
</member><member name="T:ePermitDAL.FormVersions">
	<summary>
 Holds a formVersion and all versions available.
 </summary>
</member><member name="T:ePermitDAL.ValidationException">
	<summary>
 Thrown from the business classes when a validation rule is broken.
 </summary>
	<remarks></remarks>
</member><member name="M:ePermitDAL.Factory.GetFormsEx(ePermitDAL.CheckIDResult,System.Collections.Generic.List{ePermitDAL.WhereCriteria})">
	<summary>
 Gets the forms matching the selection criteria.
 </summary>
	<param name="chk">The checkIDResult with the current users login name and token ID.</param>
	<param name="lstCriteria">The a list of WhereCriteria objects with criteria for selecting forms.
 Possible WhereCriteria Include:
 1. Doc_num = document number to select.
 2. Status = array of status to select.
 3. opNum = operator number to select
 4. FormNum= array of form numbers to select
 5. CompanyName = Company/Operator Name to select</param>
 6. fromDate = earliest data_entry_date to include
 7. toDate = latest data_entry_date to include
 8. TaskNames = comma separated string of task names to select.
 9. MyTasks = finds tasks assinged to the current login token and only selects for those tasks and forms that include one or more of the assigned tasks.
 <returns></returns>
</member><member name="M:ePermitDAL.Factory.LogonUser(System.String,System.String,System.String,System.Int32,System.Int32,System.IntPtr@)">
	<summary>
 Login Account
 </summary>
	<param name="lpszUsername">User Name</param>
	<param name="lpszDomain">Domain Name</param>
	<param name="lpszPassword">Password</param>
	<param name="dwLogonType"></param>
	<param name="dwLogonProvider"></param>
	<param name="phToken"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ePermitDAL.Factory.CloseHandle(System.IntPtr)">
	<summary>
 Close account
 </summary>
	<param name="handle"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ePermitDAL.Factory.DuplicateToken(System.IntPtr,System.Int32,System.IntPtr@)">
	<summary>
 Replicate IntPtr Token
 </summary>
	<param name="ExistingTokenHandle"></param>
	<param name="SECURITY_IMPERSONATION_LEVEL"></param>
	<param name="DuplicateTokenHandle"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ePermitDAL.Factory.Impersonate(System.String,System.String)">
	<summary>
 Impersonate login account
 </summary>
	<param name="strAccount">User Account</param>
	<param name="strPassword">Passowrd</param>
	<returns></returns>
	<remarks></remarks>
	<example>Impersonate User account as administrator
 <code>
 dim func as new functions()
 func.Impersonate("administrator","123")
 ....<c>...Run Code...</c>
 func.impersonateUndo
 </code>
	</example>
</member><member name="T:ePermitDAL.Lookups">
	<summary>
 A singleton class to hold the Lookups XML
 </summary>
</member><member name="P:ePermitDAL.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:ePermitDAL.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:ePermitDAL.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="P:ePermitDAL.WhereCriteria.FieldName">
	<summary>
 Gets or sets the name of the field to search.
 </summary>
	<value>The name of the field.</value>
</member><member name="P:ePermitDAL.WhereCriteria.FindValue">
	<summary>
 Gets or sets the value to find in the field name.
 </summary>
	<value>The find value.</value>
</member><member name="P:ePermitDAL.WhereCriteria.Options">
	<summary>
 Gets or sets the options associated with this criteria. It could be the comparison critieria (e.g. "=","&gt;", etc.).
 </summary>
	<value>The options for this filter field.</value>
</member><member name="T:ePermitDAL.WhereCriteria">
	<summary>
 Data used to select a set of records from a dataset
 </summary>
</member>
</members>
</doc>